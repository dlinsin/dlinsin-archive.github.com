<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>David Linsin</title>
 <link href="http://dlinsin.github.com/atom.xml" rel="self"/>
 <link href="http://dlinsin.github.com/"/>
 <updated>2011-02-24T08:10:27+01:00</updated>
 <id>http://dlinsin.github.com/</id>
 <author>
   <name>David Linsin</name>
   <email>dlinsin@gmail.com</email>
 </author>

 
 <entry>
   <title>Hello World</title>
   <link href="http://dlinsin.github.com/2011/03/01/hello-world.html"/>
   <updated>2011-03-01T00:00:00+01:00</updated>
   <id>http://dlinsin.github.com/2011/03/01/hello-world</id>
   <content type="html">&lt;p&gt;When developers are talking about &lt;a href='http://en.wikipedia.org/wiki/Hello_world_program' title='Wikipedia on Hello World'&gt;&amp;#8220;Hello World&amp;#8221;&lt;/a&gt;, they usually talk about their first steps in a new programming language. When I say &amp;#8220;Hello World&amp;#8221; today, I am talking about my first steps in mobile development.&lt;/p&gt;

&lt;p&gt;If you are reading this, you are probably aware of my &lt;a href='http://furryfishApps.com/wordbuzz' title='furryfishApps - Word Buzz'&gt;other mobile endavours&lt;/a&gt; and might be asking yourself right now: why &amp;#8220;Hello World&amp;#8221;? Why first steps? Well, today is my first day of iOS-only and full time mobile development at &lt;a href='http://grandcentrix.net' title='GrandCentrix GmbH'&gt;GrandCentrix GmbH&lt;/a&gt; in Cologne.&lt;/p&gt;

&lt;p&gt;GrandCentrix is your full service provider for mobile solutions. We provide ready to use mobile marketing, productivity and customer-service Apps for various platforms and industries.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m really excited about this change! My spare time passion for iOS development turns into my day job, which means I can put a 120% of my efforts and concentration into building awesome Apps.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>ShareKit Pimping</title>
   <link href="http://dlinsin.github.com/2011/02/15/sharekit-pimping.html"/>
   <updated>2011-02-15T00:00:00+01:00</updated>
   <id>http://dlinsin.github.com/2011/02/15/sharekit-pimping</id>
   <content type="html">&lt;p&gt;A couple of months ago, I &lt;a href='http://dlinsin.blogspot.com/2010/11/word-buzz-getting-better-twitter.html'&gt;improved Word Buzz' Twitter sharing feature&lt;/a&gt; significantly, by leveraging a &lt;a href='https://github.com/dlinsin/iphone-twitter'&gt;tweaked version&lt;/a&gt; of an existing framework. Unfortunately, I had only heard of &lt;a href='http://getsharekit.com'&gt;ShareKit&lt;/a&gt; at that time, that&amp;#8217;s the reason why I decided to implement my own solution!&lt;/p&gt;

&lt;p&gt;In case you don&amp;#8217;t know about ShareKit or like me only heard about it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;SharKit adds full sharing capabilities to your App. It&amp;#8217;s a drop-in library, which supports services like Twitter, Facebook, Instapaper and many more. You can share links, text and pictures with a customizable user interface. It evens queues shared items until an internet connection is available.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;SharKit is awesome and I really regret not using it to add Twitter sharing to &lt;a href='http://itunes.apple.com/app/word-buzz/id388372038?mt=8'&gt;Word Buzz&lt;/a&gt;. It has a well documented API and is really easy to extend, there&amp;#8217;s even a step-by-step guide on ShakreKit&amp;#8217;s website, which describes the process. I followed that guide to add &lt;a href='https://github.com/dlinsin/ShareKit'&gt;TwitPic and yfrog capability&lt;/a&gt; to ShareKit for one of our next &lt;a href='http://twitter.com/furryfishApps'&gt;furryfishApps&lt;/a&gt; projects and that&amp;#8217;s what I&amp;#8217;d like to write about in this post.&lt;/p&gt;

&lt;p&gt;ShareKit comes with built-in Twitter support, which you can find in &lt;em&gt;SHKTwitter&lt;/em&gt; and its authentication form &lt;em&gt;SHKTwitterForm&lt;/em&gt;. It uses &lt;a href='http://bit.ly'&gt;bit.ly&lt;/a&gt; to share images, which has a similar API as TwitPic and yfrog. I piggybacked on that implementation, however dropped oAuth support in favor of xAuth.&lt;/p&gt;

&lt;p&gt;I know there are &lt;a href='http://hueniverse.com/2010/06/xauth-a-terrible-horrible-no-good-very-bad-idea/'&gt;a lot of discussions&lt;/a&gt; on xAuth, however I found it the &lt;a href='http://www.reynoldsftw.com/2010/03/using-xauth-an-alternate-oauth-from-twitter/'&gt;easiest way&lt;/a&gt; to provide the most benefit for iPhone App users, without compromising security in a hurtful way. In order to get your iPhone App ready to use xAuth with Twitter, you need to sign up at &lt;a href='http://developer.twitter.com/'&gt;http://developer.twitter.com/&lt;/a&gt;. I described the process in a &lt;a href='http://dlinsin.blogspot.com/2010/11/word-buzz-getting-better-twitter.html'&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The previously mentioned class &lt;em&gt;SHKTwitter&lt;/em&gt; inherits from &lt;em&gt;SHKOAuthSharer&lt;/em&gt;, which does all the heavy lifting in terms of authentication for you! All you need to do is hook into the API calls and customize your authentication screen:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSArray&lt;/span&gt; &lt;span class='nl'&gt;arrayWithObjects:&lt;/span&gt;
  &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;SHKFormFieldSettings&lt;/span&gt; &lt;span class='nl'&gt;label:&lt;/span&gt;&lt;span class='n'&gt;SHKLocalizedString&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Username&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nl'&gt;key:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;username&amp;quot;&lt;/span&gt; 
    &lt;span class='nl'&gt;type:&lt;/span&gt;&lt;span class='n'&gt;SHKFormFieldTypeText&lt;/span&gt; &lt;span class='nl'&gt;start:&lt;/span&gt;&lt;span class='nb'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
  &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;SHKFormFieldSettings&lt;/span&gt; &lt;span class='nl'&gt;label:&lt;/span&gt;&lt;span class='n'&gt;SHKLocalizedString&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Password&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nl'&gt;key:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;password&amp;quot;&lt;/span&gt; 
    &lt;span class='nl'&gt;type:&lt;/span&gt;&lt;span class='n'&gt;SHKFormFieldTypePassword&lt;/span&gt; &lt;span class='nl'&gt;start:&lt;/span&gt;&lt;span class='nb'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;
  &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;SHKFormFieldSettings&lt;/span&gt; &lt;span class='nl'&gt;label:&lt;/span&gt;&lt;span class='n'&gt;SHKLocalizedString&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Send to Twitter&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; 
    &lt;span class='nl'&gt;key:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;sendToTwitter&amp;quot;&lt;/span&gt; &lt;span class='nl'&gt;type:&lt;/span&gt;&lt;span class='n'&gt;SHKFormFieldTypeSwitch&lt;/span&gt; &lt;span class='nl'&gt;start:&lt;/span&gt;&lt;span class='n'&gt;SHKFormFieldSwitchOn&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt;&lt;span class='nb'&gt;nil&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;a href='https://gist.github.com/827260' class='gist'&gt;gist&lt;/a&gt;
&lt;p&gt;So let&amp;#8217;s say the user wants to share a picture, taps on the share icon and select TwitPic. He authenticates after being prompt for his Twitter credentials. When the authentication was successful, you want to show some sort of form to your users, where they can enter a comment or in case of Twitter, their status. You can totally customize the UI, without any dependency to ShareKit. In fact &lt;em&gt;SHKTwitterForm&lt;/em&gt;, ShareKits built-in Twitter form, is a simple &lt;em&gt;UIViewController&lt;/em&gt; with its delegate set to &lt;em&gt;SHKTwitter&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The actual sharing part of the code is as straight forward as the rest of ShareKit. It&amp;#8217;s a little verbose, but once your understood the concept, it&amp;#8217;s easy to extend:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='objectivec'&gt;&lt;span class='o'&gt;-&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kt'&gt;void&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='n'&gt;sendImage&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;

&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='n'&gt;oauthHeader&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;oauthHeader&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

&lt;span class='n'&gt;NSURL&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;serviceURL&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSURL&lt;/span&gt; &lt;span class='nl'&gt;URLWithString:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;http://yfrog.com/api/xauth_upload&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='n'&gt;OAMutableURLRequest&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='n'&gt;OAMutableURLRequest&lt;/span&gt; &lt;span class='n'&gt;alloc&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nl'&gt;initWithURL:&lt;/span&gt;&lt;span class='n'&gt;serviceURL&lt;/span&gt;
&lt;span class='nl'&gt;consumer:&lt;/span&gt;&lt;span class='n'&gt;super&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;consumer&lt;/span&gt;
&lt;span class='nl'&gt;token:&lt;/span&gt;&lt;span class='n'&gt;super&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;accessToken&lt;/span&gt;
&lt;span class='nl'&gt;realm:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;http://api.twitter.com/&amp;quot;&lt;/span&gt;
&lt;span class='nl'&gt;signatureProvider:&lt;/span&gt;&lt;span class='n'&gt;super&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;signatureProvider&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt; &lt;span class='n'&gt;prepare&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt; &lt;span class='nl'&gt;setValue:&lt;/span&gt;&lt;span class='nb'&gt;nil&lt;/span&gt; &lt;span class='nl'&gt;forHTTPHeaderField:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt; &lt;span class='nl'&gt;setHTTPMethod:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt; &lt;span class='nl'&gt;setValue:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;https://api.twitter.com/1/account/verify_credentials.json&amp;quot;&lt;/span&gt; 
  &lt;span class='nl'&gt;forHTTPHeaderField:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;X-Auth-Service-Provider&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt; &lt;span class='nl'&gt;setValue:&lt;/span&gt;&lt;span class='n'&gt;oauthHeader&lt;/span&gt; 
  &lt;span class='nl'&gt;forHTTPHeaderField:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;X-Verify-Credentials-Authorization&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;boundary&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s'&gt;@&amp;quot;a21ff70823f9&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;contentType&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='nl'&gt;stringWithFormat:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;multipart/form-data; &lt;/span&gt;
                                                  &lt;span class='n'&gt;boundary&lt;/span&gt;&lt;span class='o'&gt;=%&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;,boundary];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt; &lt;span class='nl'&gt;setValue:&lt;/span&gt;&lt;span class='n'&gt;contentType&lt;/span&gt; &lt;span class='nl'&gt;forHTTPHeaderField:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

&lt;span class='n'&gt;NSMutableData&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;NSMutableData&lt;/span&gt; &lt;span class='n'&gt;data&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='nl'&gt;stringWithFormat:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;--%@&lt;/span&gt;&lt;span class='se'&gt;\r\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;boundary&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; 
  &lt;span class='nl'&gt;dataUsingEncoding:&lt;/span&gt;&lt;span class='n'&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Content-Disposition: form-data; name=&lt;/span&gt;&lt;span class='se'&gt;\&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;key&lt;/span&gt;&lt;span class='se'&gt;\&amp;quot;\r\n\r\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt; 
  &lt;span class='nl'&gt;dataUsingEncoding:&lt;/span&gt;&lt;span class='n'&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='n'&gt;yfrogAPIKey&lt;/span&gt; &lt;span class='nl'&gt;dataUsingEncoding:&lt;/span&gt;&lt;span class='n'&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\r\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt; &lt;span class='nl'&gt;dataUsingEncoding:&lt;/span&gt;&lt;span class='n'&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='nl'&gt;stringWithFormat:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;--%@&lt;/span&gt;&lt;span class='se'&gt;\r\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;boundary&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; 
  &lt;span class='nl'&gt;dataUsingEncoding:&lt;/span&gt;&lt;span class='n'&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Content-Disposition: form-data; name=&lt;/span&gt;&lt;span class='se'&gt;\&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;media&lt;/span&gt;&lt;span class='se'&gt;\&amp;quot;&lt;/span&gt;&lt;span class='s'&gt;; &lt;/span&gt;
  &lt;span class='n'&gt;filename&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='err'&gt;\&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;upload.jpg&lt;/span&gt;&lt;span class='se'&gt;\&amp;quot;\r\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt; 
  &lt;span class='nl'&gt;dataUsingEncoding:&lt;/span&gt;&lt;span class='n'&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;Content-Type: image/jpg&lt;/span&gt;&lt;span class='se'&gt;\r\n\r\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt; 
  &lt;span class='nl'&gt;dataUsingEncoding:&lt;/span&gt;&lt;span class='n'&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;imageData&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;&lt;/span&gt;&lt;span class='se'&gt;\r\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt; &lt;span class='nl'&gt;dataUsingEncoding:&lt;/span&gt;&lt;span class='n'&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt; &lt;span class='nl'&gt;appendData:&lt;/span&gt;&lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='n'&gt;NSString&lt;/span&gt; &lt;span class='nl'&gt;stringWithFormat:&lt;/span&gt;&lt;span class='s'&gt;@&amp;quot;--%@--&lt;/span&gt;&lt;span class='se'&gt;\r\n&lt;/span&gt;&lt;span class='s'&gt;&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;&lt;span class='n'&gt;boundary&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; 
  &lt;span class='nl'&gt;dataUsingEncoding:&lt;/span&gt;&lt;span class='n'&gt;NSUTF8StringEncoding&lt;/span&gt;&lt;span class='p'&gt;]];&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt; &lt;span class='nl'&gt;setHTTPBody:&lt;/span&gt;&lt;span class='n'&gt;body&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt; &lt;span class='n'&gt;sendDidStart&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

&lt;span class='c1'&gt;// Start the request&lt;/span&gt;
&lt;span class='n'&gt;OAAsynchronousDataFetcher&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='n'&gt;fetcher&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;OAAsynchronousDataFetcher&lt;/span&gt; 
&lt;span class='nl'&gt;asynchronousFetcherWithRequest:&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt;
&lt;span class='nl'&gt;delegate:&lt;/span&gt;&lt;span class='n'&gt;self&lt;/span&gt;
&lt;span class='nl'&gt;didFinishSelector:&lt;/span&gt;&lt;span class='k'&gt;@selector&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nl'&gt;sendImage:didFinishWithData:&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;
&lt;span class='nl'&gt;didFailSelector:&lt;/span&gt;&lt;span class='k'&gt;@selector&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nl'&gt;sendImage:didFailWithError:&lt;/span&gt;&lt;span class='p'&gt;)];&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;fetcher&lt;/span&gt; &lt;span class='n'&gt;start&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;

&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='n'&gt;oRequest&lt;/span&gt; &lt;span class='n'&gt;release&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;a href='https://gist.github.com/827294' class='gist'&gt;gist&lt;/a&gt;
&lt;p&gt;As you can see most of the work goes into setting up the authentication headers for the request, as well as filling in the elements of the request body. There are APIs like &lt;a href='http://allseeing-i.com/ASIHTTPRequest'&gt;ASIHTTPRequest&lt;/a&gt;, which handle this for you, however ShareKit doesn&amp;#8217;t use them and I didn&amp;#8217;t want to introduce a 3rd party library. If you take a look at &lt;a href='https://github.com/Gurpartap/GSTwitPicEngine'&gt;Gurpartap's TwitPic engine&lt;/a&gt;, you can see how easy and simple the code would be.&lt;/p&gt;

&lt;p&gt;Overall it&amp;#8217;s a breeze to develop with &lt;a href='http://getsharekit.com'&gt;SharKit&lt;/a&gt; and I&amp;#8217;m glad I digged in deeper. For our next project we&amp;#8217;ll definitely use it and you should at least take a look at it before rolling your own implementation.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>UI Test Automation with Instruments</title>
   <link href="http://dlinsin.github.com/2011/01/31/ui-test-automation.html"/>
   <updated>2011-01-31T00:00:00+01:00</updated>
   <id>http://dlinsin.github.com/2011/01/31/ui-test-automation</id>
   <content type="html">&lt;p&gt;One of the most impressive talks for me at &lt;a href='http://dlinsin.blogspot.com/2010/06/wwdc10.html'&gt;WWDC 2010&lt;/a&gt; was session 306 - &amp;#8220;Automating Use Interface Testing with Instruments&amp;#8221;. I&amp;#8217;ve been wanting to check it out ever since iOS 4 was released. A couple of weeks ago, I finally had a chance to give it a test ride with &lt;a href='http://mobile.synyx.de/2010/09/i-think-i-spider-1-0-released/'&gt;&quot;I think I spider&quot;&lt;/a&gt;, one of the Apps I developed.&lt;/p&gt;

&lt;p&gt;All you need to get started is an App, Instruments and some basic JavaScript skills. Apple provides a set of &lt;a href='http://developer.apple.com/library/ios/#documentation/ToolsLanguages/Reference/UIATargetClassReference/UIATargetClass/UIATargetClass.html'&gt;JavaScript libraries&lt;/a&gt;, that you can use to drive your tests and simulate user interaction. Your custom test scripts are run using the Automation Instrument in Apple&amp;#8217;s Instruments App, targeting your App either in the Simulator or on an actual device.&lt;/p&gt;

&lt;p&gt;You can test almost every aspect of user interaction, using Apple&amp;#8217;s JavaScript library. No matter if you want to test shaking, device orientation or the basics like tapping and swiping, you can do all that using basic JavaScript function calls. Apple&amp;#8217;s &lt;a href='https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Built-InInstruments/Built-InInstruments.html%23//apple_ref/doc/uid/TP40004652-CH6-SW75'&gt;documentation&lt;/a&gt; is quite solid, as most of them are, and explains the process in detail.&lt;/p&gt;

&lt;p&gt;For &amp;#8220;I think I spider&amp;#8221; I covered the basic use cases in terms of UI, to make sure it still works after adding new features. Here is a basic example of the JavaScript involved to test &amp;#8220;opening&amp;#8221; the book, after starting the App:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// setup&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;target&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;UIATarget&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;localTarget&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;appWindow&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;target&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;frontMostApp&lt;/span&gt;&lt;span class='p'&gt;().&lt;/span&gt;&lt;span class='nx'&gt;mainWindow&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;element&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;target&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='c1'&gt;// first test&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;testName&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Start Screen Test&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nx'&gt;UIALogger&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;logStart&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;testName&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nx'&gt;UIALogger&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;logMessage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Tapping start screen&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='nx'&gt;appWindow&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;elements&lt;/span&gt;&lt;span class='p'&gt;()[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;start_screen&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;tap&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt; 

&lt;span class='c1'&gt;// open the book&lt;/span&gt;
&lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;appWindow&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;elements&lt;/span&gt;&lt;span class='p'&gt;()[&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;main_screen&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;isValid&lt;/span&gt;&lt;span class='p'&gt;())&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nx'&gt;UIALogger&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;logFail&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;testName&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='k'&gt;else&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nx'&gt;UIALogger&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;logPass&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;testName&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;a href='https://gist.github.com/803902' class='gist'&gt;gist&lt;/a&gt;
&lt;p&gt;You can see that the JavaScript API is quite easy to use and yet very powerful! After setting this up in the Automation Instrument and running it, you can see the Simulator firing up and tapping the &lt;em&gt;UIImageView&lt;/em&gt; with the accessibility label &amp;#8220;startscreen&amp;#8221; after it became available. It then tests, if the main screen of the App was loaded and either passes or fails the test.&lt;/p&gt;

&lt;p&gt;In order to make our App testable, I had to set the accessibility labels on the elements we wanted to reference from the script. That was the only change I had to make in our code. Since you should take accessibility into consideration anyways, it was a reasonable effort.&lt;/p&gt;

&lt;p&gt;Apple did an awesome job giving us developers the ability to catch regressions and make our life easier. However, there is room for improvement, which has been nicely &lt;a href='http://blog.airsource.co.uk/index.php/2010/08/13/ui-automation-on-the-iphone/'&gt;summarized&lt;/a&gt; by &lt;a href='http://www.airsource.co.uk'&gt;Air Source&lt;/a&gt;. For us, a missing &lt;em&gt;UIALogger.warn&lt;/em&gt; function in the JavaScript library was the biggest downside. Sometimes it&amp;#8217;s okay for a test to fail under certain conditions, but you still want to get a warning about it. I use &lt;em&gt;UIALogger.logMessage&lt;/em&gt; for those cases as a workaround, but it&amp;#8217;s quite easy to miss those lines, since they don&amp;#8217;t stand out.&lt;/p&gt;

&lt;p&gt;Overall, I think it&amp;#8217;s a huge improvement to have a UI testing tool for iOS Apps at hand. There is room for improvement, but the current state of UI Test Automation is already priceless!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>5 Star Rating</title>
   <link href="http://dlinsin.github.com/2011/01/10/five-star-rating.html"/>
   <updated>2011-01-10T00:00:00+01:00</updated>
   <id>http://dlinsin.github.com/2011/01/10/five-star-rating</id>
   <content type="html">&lt;p&gt;A &lt;a href='http://dlinsin.blogspot.com/2010/09/i-think-i-spider.html'&gt;couple of months ago&lt;/a&gt; we release our first own App &amp;#8221;&lt;a href='http://mobile.synyx.de/2010/09/i-think-i-spider-1-0-released/'&gt;I think I spider&lt;/a&gt;&amp;#8221; at Synyx. It features German quotes and sayings directly translated to English. It doesn&amp;#8217;t make much sense to a none-native German speaker, but believe me it&amp;#8217;s hilarious for us.&lt;/p&gt;

&lt;p&gt;The App let&amp;#8217;s you rate those quotes with a 5 star rating, which is directly incorporated into a ranking. Up until today the component in charge of the ranking is a simple bunch of &lt;em&gt;UIImageViews&lt;/em&gt; wired up with Interface Builder and set appropriately when tapped. That means if you want to give a 3 star rating, tapping on the 3rd &lt;em&gt;UIImageView&lt;/em&gt; would fill up the 2 previous one as well. Same goes for changing your mind and going from a 5 to 3 star rating. The logic would unhighlight the 4th and 5th star.&lt;/p&gt;

&lt;p&gt;Now, this works great and it certainly looks beautiful, but have you ever rated an App in the App Store on your iOS device? This is how it looks like:&lt;/p&gt;
&lt;object height='385' width='480'&gt;&lt;param name='movie' value='http://www.youtube.com/v/cbOll4SWwmU?fs=1&amp;amp;hl=en_US' /&gt;&lt;param name='allowFullScreen' value='true' /&gt;&lt;param name='allowscriptaccess' value='always' /&gt;&lt;embed src='http://www.youtube.com/v/cbOll4SWwmU?fs=1&amp;amp;hl=en_US' allowfullscreen='true' type='application/x-shockwave-flash' allowscriptaccess='always' height='385' width='480' /&gt;&lt;/object&gt;
&lt;p&gt;Apple did a great job of just getting everything right with this small little control. The way you can slide your finger over it and the stars light up is just great. Also notice that if you want to reset the rating and go down to 0 stars, you need to swipe your finger all the way to the left. Note, that you can also touch slightly below the star, in order to see the stars above your fingers.&lt;/p&gt;

&lt;p&gt;All those little details were the requirements for the next version of the rating feature of &lt;a href='http://itunes.apple.com/de/app/i-think-i-spider/id390639989?mt=8'&gt;I think I spider&lt;/a&gt;. However, having some spare time over the holidays, I though I&amp;#8217;d write a little component, which does all of that and more: &lt;strong&gt;DLStarRating&lt;/strong&gt;. You can find the code on &lt;a href='https://github.com/dlinsin/DLStarRating'&gt;github&lt;/a&gt;, along with a sample project of how to use the stuff in your next App.&lt;/p&gt;
&lt;object height='385' width='480'&gt;&lt;param name='movie' value='http://www.youtube.com/v/0fpeBo2H7Tc?fs=1&amp;amp;hl=en_US' /&gt;&lt;param name='allowFullScreen' value='true' /&gt;&lt;param name='allowscriptaccess' value='always' /&gt;&lt;embed src='http://www.youtube.com/v/0fpeBo2H7Tc?fs=1&amp;amp;hl=en_US' allowfullscreen='true' type='application/x-shockwave-flash' allowscriptaccess='always' height='385' width='480' /&gt;&lt;/object&gt;
&lt;p&gt;&lt;em&gt;DLStarRating&lt;/em&gt; consists of a configurable number of custom &lt;em&gt;UIButtons&lt;/em&gt; called &lt;em&gt;DLStarView&lt;/em&gt;. They have a different background image for their normal and highlighted state. Those buttons are wrapped in a &lt;em&gt;UIControl&lt;/em&gt; called &lt;em&gt;DLStarRatingControl&lt;/em&gt;, which does all the touch handling. The buttons are centered in the &lt;em&gt;DLStarRatingControl&lt;/em&gt; so keep that in mind when configuring its size.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s quite easy to use &lt;em&gt;DLStarRating&lt;/em&gt; in your code. You can wire it up in Interface Builder (although you won&amp;#8217;t be able to configure it from there) or in your &lt;em&gt;UIViewController&lt;/em&gt; subclass:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;DLStarRatingControl&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt;&lt;span class='nx'&gt;customNumberOfStars&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; 
  &lt;span class='p'&gt;[[&lt;/span&gt;&lt;span class='nx'&gt;DLStarRatingControl&lt;/span&gt; &lt;span class='nx'&gt;alloc&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='nx'&gt;initWithFrame&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nx'&gt;CGRectMake&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;230&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;320&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;230&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='nx'&gt;andStars&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='nx'&gt;customNumberOfStars&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;backgroundColor&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;UIColor&lt;/span&gt; &lt;span class='nx'&gt;groupTableViewBackgroundColor&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;span class='nx'&gt;customNumberOfStars&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;autoresizingMask&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt;  &lt;span class='nx'&gt;UIViewAutoresizingFlexibleLeftMargin&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; 
                                        &lt;span class='nx'&gt;UIViewAutoresizingFlexibleWidth&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; 
                                        &lt;span class='nx'&gt;UIViewAutoresizingFlexibleHeight&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; 
                                        &lt;span class='nx'&gt;UIViewAutoresizingFlexibleRightMargin&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; 
                                        &lt;span class='nx'&gt;UIViewAutoresizingFlexibleTopMargin&lt;/span&gt; &lt;span class='o'&gt;|&lt;/span&gt; 
                                        &lt;span class='nx'&gt;UIViewAutoresizingFlexibleBottomMargin&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nx'&gt;customNumberOfStars&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;rating&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;self&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;view&lt;/span&gt; &lt;span class='nx'&gt;addSubview&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nx'&gt;customNumberOfStars&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;a href='https://gist.github.com/772510' class='gist'&gt;gist&lt;/a&gt;
&lt;p&gt;To customize the stars, you can replace &lt;em&gt;star.png&lt;/em&gt; and &lt;em&gt;star_highlighted.png&lt;/em&gt; in the images folder under &lt;em&gt;DLStarRating&lt;/em&gt; with your own. The only requirement is that the two images must have the same size.&lt;/p&gt;

&lt;p&gt;If you discover any bugs or have a great idea you want implemented, open an issue on &lt;a href='https://github.com/dlinsin/DLStarRating/issues'&gt;github&lt;/a&gt; or fork the project and help me out!&lt;/p&gt;</content>
 </entry>
 
 
</feed>